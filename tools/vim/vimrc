" General settings 

    syntax on 
    " https://stackoverflow.com/questions/62436654/ctrl-o-with-ignore-no-write-since-last-change
    set autowriteall
    set noerrorbells
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4
    set expandtab
    set smartindent
    set nu
    " https://stackoverflow.com/questions/9608974/horizontal-line-in-vim
    set cursorline
    set nowrap
    " Will automatically switch to a case-sensitive search if you use any capital letters:
    set smartcase
    set noswapfile
    set nobackup 
    set undodir=~/.vim/undodir " Make sure it exists
    set undofile
    set incsearch
    set background=dark
    let mapleader = ","
    set number
    set loadplugins
    set hlsearch " Highlight all search findings, enter to exit highlight
    set updatetime=1000 " For git-gutter
    set background=dark
    "set termguicolors
    "colorscheme melange
    "colorscheme catppuccin
    colorscheme PaperColor
    set colorcolumn=999
    highlight ColorColumn ctermbg=0 guibg=lightgrey
    " https://stackoverflow.com/questions/11560201/backspace-key-not-working-in-vim-vi
    set backspace=indent,eol,start

" Plugins:

    "packadd smyck.vim
    packadd vim-better-whitespace
    packadd coc.nvim
    packadd vim-terminal
    packadd supertab
    packadd ctrlp.vim
    packadd nerdtree
    packadd vim-airline
    packadd vim-gitgutter
    packadd vim-visual-multi
    packadd vim-autoclose
    packadd vim-fugitive
    packadd vim-commentary
    packadd fzf.vim
    packadd fzf
    packadd ctrlp.vim
    packadd suda.vim
    " packadd omnisharp-vim

    " filetype indent plugin on
    " syntax enable

" Keymappings:

    " CTRL + d - line duplication (overrides clipboard)
    inoremap <C-d> <Esc>yyp k<CR>i
    map <C-d> <Esc>yyp
    " https://stackoverflow.com/questions/731189/vim-duplicate-selection
    vmap <C-d> y'>p
    " CTRL + k - line deletion (overrides clipboard)
    inoremap <C-k> <Esc>dd k<CR>i
    map <C-k> dd
    " CTRL + Shift + J - join lines
    inoremap <C-S-j> <Esc><S-j>k<CR>i
    map <C-s-j> <S-j>
     " No whitespaces between <Esc> and the rest of the line is very important here,
     " took ages to debug this - empty buffer would not be closed.
     inoremap <silent> <C-w> <Esc>:call HandleNerdTreeWhenClosingTab()<CR>i
     map <silent> <C-w> <Esc>:call HandleNerdTreeWhenClosingTab()<CR>
    " CTRL + c - copy
    vmap <C-c> y<Esc>i
    " CTRL + x - extract
    vmap <C-x> d<Esc>i
    " CTRL + v - paste
    map <C-v> pi
    imap <C-v> <Esc>pi
    " CTRL + z - revert
    nmap <C-z> <Esc>ui
    imap <C-z> <Esc>ui
    " Alt + right arrow - tab right
    nmap <M-Right> <Plug>AirlineSelectPrevTab
    " Alt + left arrow - tab left    
    nmap <M-Left> <Plug>AirlineSelectNextTab
    " CTRL + Shift + F - search files for string
    nnoremap <C-S-f> :Rg <CR>
    " FIXME: https://github.com/junegunn/fzf.vim/pull/628
    "        Add relative path support!
    " Jump to file in selection
    nnoremap <C-b> <C-W>gf
    vnoremap <C-b> <C-W>gf
    " https://unix.stackexchange.com/questions/72086/ctrl-s-hangs-the-terminal-emulator
    nmap <C-s> <Esc>:w<CR>
    " FIXME: Select a word 
    " nmap <C-w> viw
    " imap <C-w> <Esc>viw
    " Shift-tab
    " https://stackoverflow.com/questions/4559896/how-to-tab-backwards-remove-a-tab-or-tab-spaces-in-vim
    inoremap <S-Tab> <C-d>
    " https://vi.stackexchange.com/questions/2350/how-to-map-alt-key
    " As in bash:
    execute "set <M-d>=\ed"
    nmap <M-d> dawkh <CR>
    imap <M-d> <Esc>lcaw
    " Delete to the left/right of the cursor:
    execute "set <M-e>=\ee"
    nmap <M-e> d0 kh <CR>
    imap <M-e> <Esc> d0 <CR>kh i
    execute "set <M-r>=\er"
    nmap <M-r> D <CR>
    imap <M-r> <Esc>Dli
    " Comment line or selection:
    " https://vi.stackexchange.com/questions/26611/is-it-possible-to-map-control-forward-slash-with-vim
    nmap <C-_> gccj
    vmap <C-_> gcc<Esc>
    imap <C-_> <Esc>gccj i
    " Pane navigation - toggle pane:
    " https://stackoverflow.com/questions/6053301/easier-way-to-navigate-between-vim-split-panes
    " https://stackoverflow.com/questions/4809729/cancel-split-window-in-vim#:~:text=Press%20Control%20%2B%20w%20%2C%20then%20hit,each%20window%20at%20a%20time.
    nmap <silent> <Tab> :wincmd w<CR>
    " Search for file with name:
    nmap <C-S-n> :CtrlP <CR>

    " https://stackoverflow.com/questions/7692233/nerdtree-reveal-file-in-tree

   " https://superuser.com/questions/1141994/autorefresh-nerdtree
   autocmd BufEnter NERD_tree_* | execute 'normal R'

    " Check if NERDTree is open or active
    function! IsNERDTreeOpen()
        return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
    endfunction

    " Call NERDTreeFind iff NERDTree is active, current window contains a modifiable
    " file, and we're not in vimdiff
    function! SyncTree()
        if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
            NERDTreeFind
            wincmd p
        endif
    endfunction

    " Highlight currently open buffer in NERDTree
    autocmd BufEnter * call SyncTree()

    function! ToggleNerdTree()
        set eventignore=BufEnter
        NERDTreeToggle
        set eventignore=
    endfunction

    " To make closing buffers more smooth:

     function! HandleNerdTreeWhenClosingTab()
         if IsNERDTreeOpen()
             echom "NERDTree OPEN"
             NERDTreeClose
             normal gg
             execute ":bwipeout!"
             NERDTreeToggle
             wincmd w
         else
             echom "NERDTree CLOSED"
             normal gg
             execute ":bwipeout!"
         endif
     endfunction

    execute "set <M-1>=\e1"
    nmap <M-1> :call ToggleNerdTree()<CR>
    imap <M-1> <Esc> :call ToggleNerdTree()<CR>i
    vmap <M-1> <Esc> :call ToggleNerdTree()<CR>

    " https://unix.stackexchange.com/questions/134758/running-a-vim-key-combination-on-startup
    " autocmd VimEnter * call ToggleNerdTree()
    " autocmd VimEnter * execute "wincmd w"
    " autocmd VimEnter * call SyncTree()

" Other keymappings:

    " Undo breakpoints:
    inoremap , ,<c-g>u
    inoremap . .<c-g>u
    inoremap ! !<c-g>u
    inoremap ? ?<c-g>u

    " To disable highlighted elements for current search with enter key:
    :nnoremap <CR> :nohlsearch<CR><CR>    

    function! GoToFileOrDefinition()
        " https://vi.stackexchange.com/questions/15105/execute-is-not-returning-a-value
        " https://stackoverflow.com/questions/30301717/viml-capture-output-of-exec-command-inside-a-variable-is-possible
     
        let bufBefore = execute("echo bufnr('%')")
            silent! normal gf
        let bufAfter = execute("echo bufnr('%')")
     
        if bufBefore == bufAfter
            silent! call CocActionAsync('jumpDefinition')
        endif
    endfunction
     
    nmap <C-l> :call GoToFileOrDefinition()<CR>
    imap <C-l> <Esc> :call GoToFileOrDefinition()<CR> i

" Plugin options:

    if executable('rg')
        " allows ripgrep to detect git root / uses .gitignore for fast search
        let g:rg_derive_root='true'
    endif

    " for ctrlp to ignore irrelevant files
    let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
    let g:ctrlp_use_caching = 1

    let g:rg_highlight = 1
    " Comment with // in C/C++ files:
    autocmd FileType c,cpp,hpp,h setlocal commentstring=//\ %s
    " FIXME! Wont work
    autocmd FileType txt,sh setlocal commentstring=#\ %s
    autocmd FileType cmake setlocal commentstring=#\ %s
    autocmd FileType yml setlocal commentstring=#\ %s
    autocmd FileType yaml setlocal commentstring=#\ %s

    let g:netrw_browse_split = 2
    let g:netrw_banner = 0
    let g:netrw_winsize = 25

    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ''
    let g:airline#extensions#tabline#right_sep = ''
    let g:airline#extensions#tabline#left_alt_sep = ''
    let g:airline#extensions#tabline#right_alt_sep = ''
     
    let g:gitgutter_realtime = 1
    let g:gitgutter_eager = 1

    " Exit Vim if NERDTree is the only window remaining in the only tab.
    autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
     
    " Close the tab if NERDTree is the only window remaining in it.
    autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

    " Show dotfiles:
    let NERDTreeShowHidden=1
    " Seach for git root:
    let g:ctrlp_working_path_mode = 'ra'

    " coc.vim

    " Set internal encoding of vim, not needed on neovim, since coc.nvim using some
    " unicode characters in the file autoload/float.vim
    set encoding=utf-8

    " TextEdit might fail if hidden is not set.
    set hidden

    " Some servers have issues with backup files, see #649.
    set nobackup
    set nowritebackup

    " Give more space for displaying messages.
    set cmdheight=2

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=300

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("nvim-0.5.0") || has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif

    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
     
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
    else
      inoremap <silent><expr> <c-@> coc#refresh()
    endif

    " Make <CR> auto-select the first completion item and notify coc.nvim to
    " format on enter, <cr> could be remapped by other vim plugin
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                  \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    ""nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
      else
        execute '!' . &keywordprg . " " . expand('<cword>')
      endif
    endfunction

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')
     
    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder.
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying codeAction to the current buffer.
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Apply AutoFix to problem on the current line.
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)

    " Remap <C-f> and <C-b> for scroll float windows/popups.
    "if has('nvim-0.4.0') || has('patch-8.2.0750')
    "  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    "  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    "  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    "  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    "  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    "  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    "endif

    " Use CTRL-S for selections ranges.
    " Requires 'textDocument/selectionRange' support of language server.
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)
     
    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Add (Neo)Vim's native statusline support.
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: lightline.vim, vim-airline.
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " Mappings for CoCList
    " Show all diagnostics.
    nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions.
    nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
    " Show commands.
    nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document.
    nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols.
    nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list.
    nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Other:

    " tmux will send xterm-style keys when its xterm-keys option is on
    if &term =~ '^screen'
        execute "set <xUp>=\e[1;*A"
        execute "set <xDown>=\e[1;*B"
        execute "set <xRight>=\e[1;*C"
        execute "set <xLeft>=\e[1;*D"
    endif

" Plugins:

    packadd vim-repl
    packadd cmake4vim
    packadd far.vim

" Plugin options:

    " FIXME: Irritating behavior
    "au BufEnter * :ClangFormatAutoToggle

    autocmd FileType c,c++,h,hpp ClangFormatAutoEnable
    let g:clang_format#auto_format = 1
    let g:clang_format#detect_style_file = 1
    let g:clang_format#auto_format_on_insert_leave = 1

    " https://github.com/ntpeters/vim-better-whitespace
    let g:better_whitespace_enabled=1
    let g:strip_whitespace_on_save=1

" https://vi.stackexchange.com/questions/3561/settings-and-plugins-when-root-sudo-vim
command! -nargs=0 Sw w !sudo tee % > /dev/null


